{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class BetslipService {\n  agregarApuesta(apuesta) {\n    const apuestas = this.apuestasSeleccionadas.value;\n    const existingIndex = apuestas.findIndex(item => item.id === apuesta.id);\n    if (existingIndex > -1) {\n      // Si la apuesta ya existe, cambiar su estado de selección\n      apuestas[existingIndex].clicked = !apuestas[existingIndex].clicked;\n    } else {\n      // Si no existe, agregarla a la lista con el estado de selección como verdadero\n      apuestas.push({\n        ...apuesta,\n        clicked: true\n      });\n    }\n    this.apuestasSeleccionadas.next(apuestas);\n    console.log(apuestas);\n  }\n  obtenerApuestas() {\n    return this.apuestasSeleccionadas.asObservable();\n  }\n  constructor() {\n    this.apuestasSeleccionadas = new BehaviorSubject([]);\n  }\n  static #_ = this.ɵfac = function BetslipService_Factory(t) {\n    return new (t || BetslipService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BetslipService,\n    factory: BetslipService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","BetslipService","agregarApuesta","apuesta","apuestas","apuestasSeleccionadas","value","existingIndex","findIndex","item","id","clicked","push","next","console","log","obtenerApuestas","asObservable","constructor","_","_2","factory","ɵfac","providedIn"],"sources":["/run/media/jpguayara/Fedora Data/Personal/Iridian Prueba Tecnica Angular 16/betting_application/src/app/service/betslip.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BetslipService {\n  private apuestasSeleccionadas = new BehaviorSubject<{ data: any, id: string, clicked: boolean }[]>([]);\n\n  agregarApuesta(apuesta: { data: any, id: string }) {\n    const apuestas = this.apuestasSeleccionadas.value;\n    const existingIndex = apuestas.findIndex(item => item.id === apuesta.id);\n\n    if (existingIndex > -1) {\n      // Si la apuesta ya existe, cambiar su estado de selección\n      apuestas[existingIndex].clicked = !apuestas[existingIndex].clicked;\n      \n    } else {\n      // Si no existe, agregarla a la lista con el estado de selección como verdadero\n      apuestas.push({ ...apuesta, clicked: true });\n    }\n    \n    this.apuestasSeleccionadas.next(apuestas);\n    console.log(apuestas);\n  }\n\n  obtenerApuestas() {\n    return this.apuestasSeleccionadas.asObservable();\n  }\n\n  constructor() { }\n}\n"],"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;;AAKtC,OAAM,MAAOC,cAAc;EAGzBC,cAAcA,CAACC,OAAkC;IAC/C,MAAMC,QAAQ,GAAG,IAAI,CAACC,qBAAqB,CAACC,KAAK;IACjD,MAAMC,aAAa,GAAGH,QAAQ,CAACI,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKP,OAAO,CAACO,EAAE,CAAC;IAExE,IAAIH,aAAa,GAAG,CAAC,CAAC,EAAE;MACtB;MACAH,QAAQ,CAACG,aAAa,CAAC,CAACI,OAAO,GAAG,CAACP,QAAQ,CAACG,aAAa,CAAC,CAACI,OAAO;KAEnE,MAAM;MACL;MACAP,QAAQ,CAACQ,IAAI,CAAC;QAAE,GAAGT,OAAO;QAAEQ,OAAO,EAAE;MAAI,CAAE,CAAC;;IAG9C,IAAI,CAACN,qBAAqB,CAACQ,IAAI,CAACT,QAAQ,CAAC;IACzCU,OAAO,CAACC,GAAG,CAACX,QAAQ,CAAC;EACvB;EAEAY,eAAeA,CAAA;IACb,OAAO,IAAI,CAACX,qBAAqB,CAACY,YAAY,EAAE;EAClD;EAEAC,YAAA;IAvBQ,KAAAb,qBAAqB,GAAG,IAAIL,eAAe,CAAgD,EAAE,CAAC;EAuBtF;EAAC,QAAAmB,CAAA,G;qBAxBNlB,cAAc;EAAA;EAAA,QAAAmB,EAAA,G;WAAdnB,cAAc;IAAAoB,OAAA,EAAdpB,cAAc,CAAAqB,IAAA;IAAAC,UAAA,EAFb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}